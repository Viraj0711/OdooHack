{"ast":null,"code":"/**\r\n * Currency formatting utilities for Indian Rupees\r\n */\n\n/**\r\n * Format amount with Indian Rupees symbol\r\n * @param {number|string} amount - The amount to format\r\n * @param {boolean} showDecimals - Whether to show decimal places (default: true)\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatCurrency = (amount, showDecimals = true) => {\n  if (amount === null || amount === undefined || isNaN(amount)) {\n    return '₹0';\n  }\n  const numAmount = parseFloat(amount);\n  if (showDecimals) {\n    return `₹${numAmount.toLocaleString('en-IN', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    })}`;\n  } else {\n    return `₹${Math.round(numAmount).toLocaleString('en-IN')}`;\n  }\n};\n\n/**\r\n * Format amount with Indian Rupees symbol using Indian number system (lakhs, crores)\r\n * @param {number|string} amount - The amount to format\r\n * @param {boolean} shortForm - Whether to use short form (L, Cr) for large numbers\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatIndianCurrency = (amount, shortForm = false) => {\n  if (amount === null || amount === undefined || isNaN(amount)) {\n    return '₹0';\n  }\n  const numAmount = parseFloat(amount);\n  if (shortForm && numAmount >= 10000000) {\n    // 1 crore\n    const crores = numAmount / 10000000;\n    return `₹${crores.toFixed(1)}Cr`;\n  } else if (shortForm && numAmount >= 100000) {\n    // 1 lakh\n    const lakhs = numAmount / 100000;\n    return `₹${lakhs.toFixed(1)}L`;\n  } else if (shortForm && numAmount >= 1000) {\n    // 1 thousand\n    const thousands = numAmount / 1000;\n    return `₹${thousands.toFixed(1)}K`;\n  }\n  return formatCurrency(amount);\n};\n\n/**\r\n * Parse currency string to number\r\n * @param {string} currencyString - String with currency symbol to parse\r\n * @returns {number} Parsed amount\r\n */\nexport const parseCurrency = currencyString => {\n  if (!currencyString) return 0;\n\n  // Remove currency symbol and commas, then parse\n  const cleanString = currencyString.replace(/[₹,\\s]/g, '');\n  return parseFloat(cleanString) || 0;\n};\n\n/**\r\n * Get currency symbol for INR\r\n * @returns {string} Currency symbol\r\n */\nexport const getCurrencySymbol = () => '₹';\n\n/**\r\n * Get currency code for Indian Rupees\r\n * @returns {string} Currency code\r\n */\nexport const getCurrencyCode = () => 'INR';\nexport default {\n  formatCurrency,\n  formatIndianCurrency,\n  parseCurrency,\n  getCurrencySymbol,\n  getCurrencyCode\n};","map":{"version":3,"names":["formatCurrency","amount","showDecimals","undefined","isNaN","numAmount","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","Math","round","formatIndianCurrency","shortForm","crores","toFixed","lakhs","thousands","parseCurrency","currencyString","cleanString","replace","getCurrencySymbol","getCurrencyCode"],"sources":["D:/Odoo 2/expense-management-app/frontend/src/utils/currency.js"],"sourcesContent":["/**\r\n * Currency formatting utilities for Indian Rupees\r\n */\r\n\r\n/**\r\n * Format amount with Indian Rupees symbol\r\n * @param {number|string} amount - The amount to format\r\n * @param {boolean} showDecimals - Whether to show decimal places (default: true)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (amount, showDecimals = true) => {\r\n  if (amount === null || amount === undefined || isNaN(amount)) {\r\n    return '₹0';\r\n  }\r\n\r\n  const numAmount = parseFloat(amount);\r\n  \r\n  if (showDecimals) {\r\n    return `₹${numAmount.toLocaleString('en-IN', {\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 2\r\n    })}`;\r\n  } else {\r\n    return `₹${Math.round(numAmount).toLocaleString('en-IN')}`;\r\n  }\r\n};\r\n\r\n/**\r\n * Format amount with Indian Rupees symbol using Indian number system (lakhs, crores)\r\n * @param {number|string} amount - The amount to format\r\n * @param {boolean} shortForm - Whether to use short form (L, Cr) for large numbers\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatIndianCurrency = (amount, shortForm = false) => {\r\n  if (amount === null || amount === undefined || isNaN(amount)) {\r\n    return '₹0';\r\n  }\r\n\r\n  const numAmount = parseFloat(amount);\r\n  \r\n  if (shortForm && numAmount >= 10000000) { // 1 crore\r\n    const crores = numAmount / 10000000;\r\n    return `₹${crores.toFixed(1)}Cr`;\r\n  } else if (shortForm && numAmount >= 100000) { // 1 lakh\r\n    const lakhs = numAmount / 100000;\r\n    return `₹${lakhs.toFixed(1)}L`;\r\n  } else if (shortForm && numAmount >= 1000) { // 1 thousand\r\n    const thousands = numAmount / 1000;\r\n    return `₹${thousands.toFixed(1)}K`;\r\n  }\r\n  \r\n  return formatCurrency(amount);\r\n};\r\n\r\n/**\r\n * Parse currency string to number\r\n * @param {string} currencyString - String with currency symbol to parse\r\n * @returns {number} Parsed amount\r\n */\r\nexport const parseCurrency = (currencyString) => {\r\n  if (!currencyString) return 0;\r\n  \r\n  // Remove currency symbol and commas, then parse\r\n  const cleanString = currencyString.replace(/[₹,\\s]/g, '');\r\n  return parseFloat(cleanString) || 0;\r\n};\r\n\r\n/**\r\n * Get currency symbol for INR\r\n * @returns {string} Currency symbol\r\n */\r\nexport const getCurrencySymbol = () => '₹';\r\n\r\n/**\r\n * Get currency code for Indian Rupees\r\n * @returns {string} Currency code\r\n */\r\nexport const getCurrencyCode = () => 'INR';\r\n\r\nexport default {\r\n  formatCurrency,\r\n  formatIndianCurrency,\r\n  parseCurrency,\r\n  getCurrencySymbol,\r\n  getCurrencyCode\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,YAAY,GAAG,IAAI,KAAK;EAC7D,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKE,SAAS,IAAIC,KAAK,CAACH,MAAM,CAAC,EAAE;IAC5D,OAAO,IAAI;EACb;EAEA,MAAMI,SAAS,GAAGC,UAAU,CAACL,MAAM,CAAC;EAEpC,IAAIC,YAAY,EAAE;IAChB,OAAO,IAAIG,SAAS,CAACE,cAAc,CAAC,OAAO,EAAE;MAC3CC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC,CAAC,EAAE;EACN,CAAC,MAAM;IACL,OAAO,IAAIC,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;EAC5D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,oBAAoB,GAAGA,CAACX,MAAM,EAAEY,SAAS,GAAG,KAAK,KAAK;EACjE,IAAIZ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKE,SAAS,IAAIC,KAAK,CAACH,MAAM,CAAC,EAAE;IAC5D,OAAO,IAAI;EACb;EAEA,MAAMI,SAAS,GAAGC,UAAU,CAACL,MAAM,CAAC;EAEpC,IAAIY,SAAS,IAAIR,SAAS,IAAI,QAAQ,EAAE;IAAE;IACxC,MAAMS,MAAM,GAAGT,SAAS,GAAG,QAAQ;IACnC,OAAO,IAAIS,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI;EAClC,CAAC,MAAM,IAAIF,SAAS,IAAIR,SAAS,IAAI,MAAM,EAAE;IAAE;IAC7C,MAAMW,KAAK,GAAGX,SAAS,GAAG,MAAM;IAChC,OAAO,IAAIW,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC,GAAG;EAChC,CAAC,MAAM,IAAIF,SAAS,IAAIR,SAAS,IAAI,IAAI,EAAE;IAAE;IAC3C,MAAMY,SAAS,GAAGZ,SAAS,GAAG,IAAI;IAClC,OAAO,IAAIY,SAAS,CAACF,OAAO,CAAC,CAAC,CAAC,GAAG;EACpC;EAEA,OAAOf,cAAc,CAACC,MAAM,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,aAAa,GAAIC,cAAc,IAAK;EAC/C,IAAI,CAACA,cAAc,EAAE,OAAO,CAAC;;EAE7B;EACA,MAAMC,WAAW,GAAGD,cAAc,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EACzD,OAAOf,UAAU,CAACc,WAAW,CAAC,IAAI,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM,GAAG;;AAE1C;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,KAAK;AAE1C,eAAe;EACbvB,cAAc;EACdY,oBAAoB;EACpBM,aAAa;EACbI,iBAAiB;EACjBC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}