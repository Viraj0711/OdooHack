{"ast":null,"code":"var _jsxFileName = \"D:\\\\Odoo 2\\\\OdooHack\\\\expense-management-app\\\\frontend\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useAuthContext } from './AuthContext';\nimport { socketService } from '../services/socketService';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    token\n  } = useAuthContext();\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (isAuthenticated && token && user) {\n      // Connect to socket\n      socketService.connect(token);\n\n      // Set up event listeners\n      socketService.on('connect', () => {\n        setIsConnected(true);\n        console.log('Socket connected');\n      });\n      socketService.on('disconnect', () => {\n        setIsConnected(false);\n        console.log('Socket disconnected');\n      });\n\n      // Expense-related events\n      socketService.on('new_expense', data => {\n        if (user.role === 'manager' || user.role === 'admin') {\n          toast.success(`New expense submitted by ${data.submitter.name}`);\n          setNotifications(prev => [...prev, {\n            id: Date.now(),\n            type: 'new_expense',\n            message: `New expense submitted by ${data.submitter.name}`,\n            data: data.expense,\n            timestamp: new Date(),\n            read: false\n          }]);\n        }\n      });\n      socketService.on('expense_status_update', data => {\n        if (data.userId === user.id) {\n          const statusMessage = data.status === 'approved' ? 'approved' : 'rejected';\n          toast.success(`Your expense has been ${statusMessage} by ${data.approver.name}`);\n          setNotifications(prev => [...prev, {\n            id: Date.now(),\n            type: 'expense_status_update',\n            message: `Your expense has been ${statusMessage} by ${data.approver.name}`,\n            data,\n            timestamp: new Date(),\n            read: false\n          }]);\n        }\n      });\n\n      // Approval-related events\n      socketService.on('approval_reminder', data => {\n        if (user.role === 'manager' || user.role === 'admin') {\n          toast('Pending approvals require your attention', {\n            icon: '⏰'\n          });\n          setNotifications(prev => [...prev, {\n            id: Date.now(),\n            type: 'approval_reminder',\n            message: 'Pending approvals require your attention',\n            data,\n            timestamp: new Date(),\n            read: false\n          }]);\n        }\n      });\n\n      // System notifications\n      socketService.on('system_notification', data => {\n        toast(data.message, {\n          icon: data.type === 'warning' ? '⚠️' : 'ℹ️'\n        });\n        setNotifications(prev => [...prev, {\n          id: Date.now(),\n          type: 'system_notification',\n          message: data.message,\n          data,\n          timestamp: new Date(),\n          read: false\n        }]);\n      });\n\n      // User activity events\n      socketService.on('user_login', data => {\n        if (user.role === 'admin') {\n          console.log(`User ${data.userName} logged in`);\n        }\n      });\n      socketService.on('user_logout', data => {\n        if (user.role === 'admin') {\n          console.log(`User ${data.userName} logged out`);\n        }\n      });\n      return () => {\n        socketService.disconnect();\n        setIsConnected(false);\n      };\n    }\n  }, [isAuthenticated, token, user]);\n  const emitEvent = (eventName, data) => {\n    socketService.emit(eventName, data);\n  };\n  const markNotificationAsRead = notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      read: true\n    } : notification));\n  };\n  const markAllNotificationsAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n  const getUnreadNotificationCount = () => {\n    return notifications.filter(n => !n.read).length;\n  };\n  const value = {\n    isConnected,\n    notifications,\n    unreadCount: getUnreadNotificationCount(),\n    emitEvent,\n    markNotificationAsRead,\n    markAllNotificationsAsRead,\n    clearNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 10\n  }, this);\n};\n_s(SocketProvider, \"VDlOA3xmLOdHxXw3k9ZfQBT8gfg=\", false, function () {\n  return [useAuthContext];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useAuthContext","socketService","toast","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","user","isAuthenticated","token","isConnected","setIsConnected","notifications","setNotifications","connect","on","console","log","data","role","success","submitter","name","prev","id","Date","now","type","message","expense","timestamp","read","userId","statusMessage","status","approver","icon","userName","disconnect","emitEvent","eventName","emit","markNotificationAsRead","notificationId","map","notification","markAllNotificationsAsRead","clearNotifications","getUnreadNotificationCount","filter","n","length","value","unreadCount","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["D:/Odoo 2/OdooHack/expense-management-app/frontend/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useAuthContext } from './AuthContext';\r\nimport { socketService } from '../services/socketService';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const { user, isAuthenticated, token } = useAuthContext();\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && token && user) {\r\n      // Connect to socket\r\n      socketService.connect(token);\r\n      \r\n      // Set up event listeners\r\n      socketService.on('connect', () => {\r\n        setIsConnected(true);\r\n        console.log('Socket connected');\r\n      });\r\n\r\n      socketService.on('disconnect', () => {\r\n        setIsConnected(false);\r\n        console.log('Socket disconnected');\r\n      });\r\n\r\n      // Expense-related events\r\n      socketService.on('new_expense', (data) => {\r\n        if (user.role === 'manager' || user.role === 'admin') {\r\n          toast.success(`New expense submitted by ${data.submitter.name}`);\r\n          setNotifications(prev => [...prev, {\r\n            id: Date.now(),\r\n            type: 'new_expense',\r\n            message: `New expense submitted by ${data.submitter.name}`,\r\n            data: data.expense,\r\n            timestamp: new Date(),\r\n            read: false,\r\n          }]);\r\n        }\r\n      });\r\n\r\n      socketService.on('expense_status_update', (data) => {\r\n        if (data.userId === user.id) {\r\n          const statusMessage = data.status === 'approved' ? 'approved' : 'rejected';\r\n          toast.success(`Your expense has been ${statusMessage} by ${data.approver.name}`);\r\n          \r\n          setNotifications(prev => [...prev, {\r\n            id: Date.now(),\r\n            type: 'expense_status_update',\r\n            message: `Your expense has been ${statusMessage} by ${data.approver.name}`,\r\n            data,\r\n            timestamp: new Date(),\r\n            read: false,\r\n          }]);\r\n        }\r\n      });\r\n\r\n      // Approval-related events\r\n      socketService.on('approval_reminder', (data) => {\r\n        if (user.role === 'manager' || user.role === 'admin') {\r\n          toast('Pending approvals require your attention', {\r\n            icon: '⏰',\r\n          });\r\n          \r\n          setNotifications(prev => [...prev, {\r\n            id: Date.now(),\r\n            type: 'approval_reminder',\r\n            message: 'Pending approvals require your attention',\r\n            data,\r\n            timestamp: new Date(),\r\n            read: false,\r\n          }]);\r\n        }\r\n      });\r\n\r\n      // System notifications\r\n      socketService.on('system_notification', (data) => {\r\n        toast(data.message, {\r\n          icon: data.type === 'warning' ? '⚠️' : 'ℹ️',\r\n        });\r\n        \r\n        setNotifications(prev => [...prev, {\r\n          id: Date.now(),\r\n          type: 'system_notification',\r\n          message: data.message,\r\n          data,\r\n          timestamp: new Date(),\r\n          read: false,\r\n        }]);\r\n      });\r\n\r\n      // User activity events\r\n      socketService.on('user_login', (data) => {\r\n        if (user.role === 'admin') {\r\n          console.log(`User ${data.userName} logged in`);\r\n        }\r\n      });\r\n\r\n      socketService.on('user_logout', (data) => {\r\n        if (user.role === 'admin') {\r\n          console.log(`User ${data.userName} logged out`);\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        socketService.disconnect();\r\n        setIsConnected(false);\r\n      };\r\n    }\r\n  }, [isAuthenticated, token, user]);\r\n\r\n  const emitEvent = (eventName, data) => {\r\n    socketService.emit(eventName, data);\r\n  };\r\n\r\n  const markNotificationAsRead = (notificationId) => {\r\n    setNotifications(prev =>\r\n      prev.map(notification =>\r\n        notification.id === notificationId\r\n          ? { ...notification, read: true }\r\n          : notification\r\n      )\r\n    );\r\n  };\r\n\r\n  const markAllNotificationsAsRead = () => {\r\n    setNotifications(prev =>\r\n      prev.map(notification => ({ ...notification, read: true }))\r\n    );\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  const getUnreadNotificationCount = () => {\r\n    return notifications.filter(n => !n.read).length;\r\n  };\r\n\r\n  const value = {\r\n    isConnected,\r\n    notifications,\r\n    unreadCount: getUnreadNotificationCount(),\r\n    emitEvent,\r\n    markNotificationAsRead,\r\n    markAllNotificationsAsRead,\r\n    clearNotifications,\r\n  };\r\n\r\n  return <SocketContext.Provider value={value}>{children}</SocketContext.Provider>;\r\n};\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}