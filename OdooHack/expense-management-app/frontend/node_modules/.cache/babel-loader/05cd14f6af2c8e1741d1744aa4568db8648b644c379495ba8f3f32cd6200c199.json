{"ast":null,"code":"// Currency utility functions for the expense management app\n\n/**\r\n * Format amount with Indian Rupee symbol\r\n * @param {number} amount - The amount to format\r\n * @param {string} locale - The locale for formatting (default: 'en-IN')\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatCurrency = (amount, locale = 'en-IN') => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    return '₹0';\n  }\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\r\n * Format amount with Rupee symbol and custom formatting\r\n * @param {number} amount - The amount to format\r\n * @param {boolean} showDecimals - Whether to show decimal places\r\n * @returns {string} Formatted currency string with ₹ symbol\r\n */\nexport const formatRupees = (amount, showDecimals = true) => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    return '₹0';\n  }\n  const formatted = showDecimals ? amount.toLocaleString('en-IN', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }) : amount.toLocaleString('en-IN', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  });\n  return `₹${formatted}`;\n};\n\n/**\r\n * Parse currency string to number\r\n * @param {string} currencyString - Currency string to parse\r\n * @returns {number} Parsed amount\r\n */\nexport const parseCurrency = currencyString => {\n  if (!currencyString) return 0;\n\n  // Remove currency symbols and commas, then parse\n  const cleanString = currencyString.replace(/[₹$,\\s]/g, '');\n  const parsed = parseFloat(cleanString);\n  return isNaN(parsed) ? 0 : parsed;\n};\n\n/**\r\n * Convert amount between currencies (placeholder for future currency conversion)\r\n * @param {number} amount - Amount to convert\r\n * @param {string} fromCurrency - Source currency\r\n * @param {string} toCurrency - Target currency\r\n * @param {number} exchangeRate - Exchange rate\r\n * @returns {number} Converted amount\r\n */\nexport const convertCurrency = (amount, fromCurrency, toCurrency, exchangeRate = 1) => {\n  if (fromCurrency === toCurrency) return amount;\n  return amount * exchangeRate;\n};\n\n/**\r\n * Get currency symbol for given currency code\r\n * @param {string} currencyCode - Currency code (e.g., 'INR', 'USD')\r\n * @returns {string} Currency symbol\r\n */\nexport const getCurrencySymbol = currencyCode => {\n  const symbols = {\n    'INR': '₹',\n    'USD': '$',\n    'EUR': '€',\n    'GBP': '£',\n    'JPY': '¥'\n  };\n  return symbols[currencyCode] || currencyCode;\n};\n\n/**\r\n * Validate currency amount\r\n * @param {string|number} amount - Amount to validate\r\n * @returns {boolean} Whether the amount is valid\r\n */\nexport const isValidAmount = amount => {\n  if (typeof amount === 'string') {\n    amount = parseCurrency(amount);\n  }\n  return typeof amount === 'number' && !isNaN(amount) && amount >= 0;\n};\n\n// Default currency configuration\nexport const DEFAULT_CURRENCY = 'INR';\nexport const DEFAULT_CURRENCY_SYMBOL = '₹';\nexport const DEFAULT_LOCALE = 'en-IN';","map":{"version":3,"names":["formatCurrency","amount","locale","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatRupees","showDecimals","formatted","toLocaleString","parseCurrency","currencyString","cleanString","replace","parsed","parseFloat","convertCurrency","fromCurrency","toCurrency","exchangeRate","getCurrencySymbol","currencyCode","symbols","isValidAmount","DEFAULT_CURRENCY","DEFAULT_CURRENCY_SYMBOL","DEFAULT_LOCALE"],"sources":["D:/Odoo 2/OdooHack/expense-management-app/frontend/src/utils/currency.js"],"sourcesContent":["// Currency utility functions for the expense management app\r\n\r\n/**\r\n * Format amount with Indian Rupee symbol\r\n * @param {number} amount - The amount to format\r\n * @param {string} locale - The locale for formatting (default: 'en-IN')\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (amount, locale = 'en-IN') => {\r\n  if (typeof amount !== 'number' || isNaN(amount)) {\r\n    return '₹0';\r\n  }\r\n\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency: 'INR',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 2,\r\n  }).format(amount);\r\n};\r\n\r\n/**\r\n * Format amount with Rupee symbol and custom formatting\r\n * @param {number} amount - The amount to format\r\n * @param {boolean} showDecimals - Whether to show decimal places\r\n * @returns {string} Formatted currency string with ₹ symbol\r\n */\r\nexport const formatRupees = (amount, showDecimals = true) => {\r\n  if (typeof amount !== 'number' || isNaN(amount)) {\r\n    return '₹0';\r\n  }\r\n\r\n  const formatted = showDecimals \r\n    ? amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })\r\n    : amount.toLocaleString('en-IN', { minimumFractionDigits: 0, maximumFractionDigits: 0 });\r\n  \r\n  return `₹${formatted}`;\r\n};\r\n\r\n/**\r\n * Parse currency string to number\r\n * @param {string} currencyString - Currency string to parse\r\n * @returns {number} Parsed amount\r\n */\r\nexport const parseCurrency = (currencyString) => {\r\n  if (!currencyString) return 0;\r\n  \r\n  // Remove currency symbols and commas, then parse\r\n  const cleanString = currencyString.replace(/[₹$,\\s]/g, '');\r\n  const parsed = parseFloat(cleanString);\r\n  \r\n  return isNaN(parsed) ? 0 : parsed;\r\n};\r\n\r\n/**\r\n * Convert amount between currencies (placeholder for future currency conversion)\r\n * @param {number} amount - Amount to convert\r\n * @param {string} fromCurrency - Source currency\r\n * @param {string} toCurrency - Target currency\r\n * @param {number} exchangeRate - Exchange rate\r\n * @returns {number} Converted amount\r\n */\r\nexport const convertCurrency = (amount, fromCurrency, toCurrency, exchangeRate = 1) => {\r\n  if (fromCurrency === toCurrency) return amount;\r\n  return amount * exchangeRate;\r\n};\r\n\r\n/**\r\n * Get currency symbol for given currency code\r\n * @param {string} currencyCode - Currency code (e.g., 'INR', 'USD')\r\n * @returns {string} Currency symbol\r\n */\r\nexport const getCurrencySymbol = (currencyCode) => {\r\n  const symbols = {\r\n    'INR': '₹',\r\n    'USD': '$',\r\n    'EUR': '€',\r\n    'GBP': '£',\r\n    'JPY': '¥',\r\n  };\r\n  \r\n  return symbols[currencyCode] || currencyCode;\r\n};\r\n\r\n/**\r\n * Validate currency amount\r\n * @param {string|number} amount - Amount to validate\r\n * @returns {boolean} Whether the amount is valid\r\n */\r\nexport const isValidAmount = (amount) => {\r\n  if (typeof amount === 'string') {\r\n    amount = parseCurrency(amount);\r\n  }\r\n  \r\n  return typeof amount === 'number' && !isNaN(amount) && amount >= 0;\r\n};\r\n\r\n// Default currency configuration\r\nexport const DEFAULT_CURRENCY = 'INR';\r\nexport const DEFAULT_CURRENCY_SYMBOL = '₹';\r\nexport const DEFAULT_LOCALE = 'en-IN';\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,MAAM,GAAG,OAAO,KAAK;EAC1D,IAAI,OAAOD,MAAM,KAAK,QAAQ,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE;IAC/C,OAAO,IAAI;EACb;EAEA,OAAO,IAAIG,IAAI,CAACC,YAAY,CAACH,MAAM,EAAE;IACnCI,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACT,MAAM,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,YAAY,GAAGA,CAACV,MAAM,EAAEW,YAAY,GAAG,IAAI,KAAK;EAC3D,IAAI,OAAOX,MAAM,KAAK,QAAQ,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE;IAC/C,OAAO,IAAI;EACb;EAEA,MAAMY,SAAS,GAAGD,YAAY,GAC1BX,MAAM,CAACa,cAAc,CAAC,OAAO,EAAE;IAAEN,qBAAqB,EAAE,CAAC;IAAEC,qBAAqB,EAAE;EAAE,CAAC,CAAC,GACtFR,MAAM,CAACa,cAAc,CAAC,OAAO,EAAE;IAAEN,qBAAqB,EAAE,CAAC;IAAEC,qBAAqB,EAAE;EAAE,CAAC,CAAC;EAE1F,OAAO,IAAII,SAAS,EAAE;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAIC,cAAc,IAAK;EAC/C,IAAI,CAACA,cAAc,EAAE,OAAO,CAAC;;EAE7B;EACA,MAAMC,WAAW,GAAGD,cAAc,CAACE,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EAC1D,MAAMC,MAAM,GAAGC,UAAU,CAACH,WAAW,CAAC;EAEtC,OAAOd,KAAK,CAACgB,MAAM,CAAC,GAAG,CAAC,GAAGA,MAAM;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAACpB,MAAM,EAAEqB,YAAY,EAAEC,UAAU,EAAEC,YAAY,GAAG,CAAC,KAAK;EACrF,IAAIF,YAAY,KAAKC,UAAU,EAAE,OAAOtB,MAAM;EAC9C,OAAOA,MAAM,GAAGuB,YAAY;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,YAAY,IAAK;EACjD,MAAMC,OAAO,GAAG;IACd,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE;EACT,CAAC;EAED,OAAOA,OAAO,CAACD,YAAY,CAAC,IAAIA,YAAY;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAI3B,MAAM,IAAK;EACvC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9BA,MAAM,GAAGc,aAAa,CAACd,MAAM,CAAC;EAChC;EAEA,OAAO,OAAOA,MAAM,KAAK,QAAQ,IAAI,CAACE,KAAK,CAACF,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC;AACpE,CAAC;;AAED;AACA,OAAO,MAAM4B,gBAAgB,GAAG,KAAK;AACrC,OAAO,MAAMC,uBAAuB,GAAG,GAAG;AAC1C,OAAO,MAAMC,cAAc,GAAG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}